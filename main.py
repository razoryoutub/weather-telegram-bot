from aiogram import Bot, Dispatcher, executor, types
from sqlighter import SQLighter
import logging, asyncio, time, pyowm, random, aiohttp, schedule
import emoji
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyowm import OWM
from pyowm.utils.config import get_default_config
from pyowm.commons.enums import SubscriptionTypeEnum

config_dict = get_default_config()
config_dict['language'] = 'ru'  # your language here


logging.basicConfig(level=logging.INFO)
owm = pyowm.OWM('dbeee7264d80b183568973e21e1633fd', config_dict)
mgr = owm.weather_manager()


#telegram bot

#token='915096497:AAFvPSbMpvjdtNSucGNwSy6afA8UURu89nI'




#testbot

token = '1225831912:AAG60sUGFoeRVePSufgLFM0Xaat176T2t1o'



bot = Bot(token)

dp = Dispatcher(bot)
db = SQLighter('db.db')

inline_btn_1 = InlineKeyboardButton('4üïì', callback_data='time4')
inline_btn_2 = InlineKeyboardButton('5üïî', callback_data='time5')
inline_btn_3 = InlineKeyboardButton('6üïï', callback_data='time6')
inline_btn_4 = InlineKeyboardButton('7üïñ', callback_data='time7')
inline_btn_5 = InlineKeyboardButton('8üïó', callback_data='time8')
inline_btn_6 = InlineKeyboardButton('9üïò', callback_data='time9')
inline_btn_7 = InlineKeyboardButton('10üïô', callback_data='time10')
inline_btn_8 = InlineKeyboardButton('11üïö', callback_data='time11')
inline_btn_9 = InlineKeyboardButton('12üïõ', callback_data='time12')
inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1, inline_btn_2, inline_btn_3, inline_btn_4, inline_btn_5, inline_btn_6, inline_btn_7, inline_btn_8, inline_btn_9)






@dp.message_handler(commands=['start', 'help'])
async def handle_start_help(message: types.Message):
	r = random.randint(0,2)
	if r == 0:
		await message.answer('–ü—Ä–∏–≤–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –º–µ—Å—Ç–æ, –∞ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –ø–æ–≥–æ–¥—É –≤ –Ω—ë–º ü§î')
	elif r == 1:
		await message.answer('–í—Å—ë –ø—Ä–æ—Å—Ç–æ, —Å —Ç–µ–±—è –≥–æ—Ä–æ–¥ —Å –º–µ–Ω—è –ø–æ–≥–æ–¥–∞, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ...')
	elif r == 2:
		await message.answer('–ö—É, –ø–∏—à–∏ –≥–æ—Ä–æ–¥, —è –Ω–∞–ø–∏—à—É —Å–∫–æ–ª—å–∫–æ —Ç–∞–º –≥—Ä–∞–¥—É—Å–æ–≤, –∫–∞–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –∏ —Ç.–¥.')
	await message.answer('–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ:\n/subscribe "–≥–æ—Ä–æ–¥"')
	await message.answer('–ê –µ—â—ë –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∫–æ–º–∞–Ω–¥–æ–π /forecast "–≥–æ—Ä–æ–¥"')
	if db.subscriber_exists(message.from_user.id) == 'da':
		pass
	else:
		# –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
		db.add_subscriber(message)
		await bot.send_message(214196761, '{0} added\n{1} {2} \n{3}'.format(message.from_user.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username))



@dp.callback_query_handler()
async def process_callback_button1(callback_query: types.CallbackQuery):
	await bot.answer_callback_query(callback_query.id)
	if callback_query.data=='time4':
		await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="–≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 4:00")
		db.add_time(callback_query.message.chat.id, "00")
	elif callback_query.data=='time5':
		await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="–≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 5:00")
		db.add_time(callback_query.message.chat.id, "01")
	elif callback_query.data=='time6':
		await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="–≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 6:00")
		db.add_time(callback_query.message.chat.id, "02")
	elif callback_query.data=='time7':
		await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="–≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 7:00")
		db.add_time(callback_query.message.chat.id, "03")
	elif callback_query.data=='time8':
		await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="–≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 8:00")
		db.add_time(callback_query.message.chat.id, "04")
	elif callback_query.data=='time9':
		await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="–≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 9:00")
		db.add_time(callback_query.message.chat.id, "05")
	elif callback_query.data=='time10':
		await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="–≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 10:00")
		db.add_time(callback_query.message.chat.id, "06")
	elif callback_query.data=='time11':
		await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="–≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 11:00")
		db.add_time(callback_query.message.chat.id, "07")
	elif callback_query.data=='time12':
		await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="–≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 12:00")
		db.add_time(callback_query.message.chat.id, "08")


@dp.message_handler(commands=['subscribe'])
async def subscribe(message: types.Message):
	city = message.text[11:]
	if db.subscriber_exists(message.from_user.id) == 'da':
		if db.subscription_status(message.from_user.id):
			city = str(db.subscription_city(message.from_user.id))
			city = city[3:-4]
			time = str(db.get_time(message.from_user.id)[0][0] + 4) + ":00"
			await message.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≥–æ—Ä–æ–¥: {0}!\n—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ {1} (–ú–°–ö)\n–¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –Ω–∞–ø–∏—à–∏ /unsubscribe".format(city,time))
		else:
			if city == "":
				await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe "–≥–æ—Ä–æ–¥"')
			else:
				await message.answer("–≤—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è: ", reply_markup=inline_kb1)
				db.update_subscription(message, True, city)		
	else:
		if city == "":
			db.add_subscriber(message)
			await bot.send_message(214196761, '{0} added\n{1} {2} \n{3}'.format(message.from_user.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username))
			await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe "–≥–æ—Ä–æ–¥"')
		else:
			# –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
			db.add_subscriber(message, True)
			db.update_subscription(message, True, city)
			await bot.send_message(214196761, '{0} added\n{1} {2} \n{3}'.format(message.from_user.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username))
			await message.answer("–≤—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è: ", reply_markup=inline_kb1)


			

@dp.message_handler(commands=['unsubscribe'])
async def unsubscribe(message: types.Message):
	if db.subscriber_exists(message.from_user.id) == 'da':
		if (db.subscription_status(message.from_user.id)):
			db.update_subscription(message, False)
			await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.\n–¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ - /subscribe "–≥–æ—Ä–æ–¥"')
		else:
			await message.answer('–í—ã –∏ —Ç–∞–∫ –Ω–∏ –Ω–∞ —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã\n–¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ - /subscribe "–≥–æ—Ä–æ–¥"')
	else:
		# –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
		db.add_subscriber(message, False)
		await bot.send_message(214196761, '{0} added\n{1} {2} \n{3}'.format(message.from_user.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username))
		await message.answer('–í—ã –∏ —Ç–∞–∫ –Ω–∏ –Ω–∞ —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã\n–¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ - /subscribe "–≥–æ—Ä–æ–¥"')



@dp.message_handler(commands=['forecast'])
async def unsubscribe(message: types.Message):
	city = str(message.text[10:])
	if city == '':
		await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /forecast "–≥–æ—Ä–æ–¥"')
		if db.subscriber_exists(message.from_user.id) == 'da':
			pass
		else:
			db.add_subscriber(message, False)
			await bot.send_message(214196761, '{0} added\n{1} {2} \n{3}'.format(message.from_user.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username))
	else:
		observation = mgr.weather_at_place(city)
		w = observation.weather
		fc1 = mgr.forecast_at_place(city,'3h')
		f = fc1.forecast
		reception_date = str(f)
		reception_date = reception_date[55:65]
		answer = ""
		for w in f:
			time = str(w.reference_time('iso'))
			date = time[:10] 
			if date == reception_date:
				time = str(time[11:16])
				temp = str(w.temperature('celsius')["temp"])
				detailed_status = w.detailed_status
				not_detailed = w.status
				answer1 = "{0}:\n{1}{3} {2}¬∫C\n\n".format(time,detailed_status,temp,emoji.get_emoji(not_detailed))
				answer = answer + answer1
		await message.answer('–ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≥–æ—Ä–æ–¥–∞: ' +city + '\n\n' + answer)
		if db.subscriber_exists(message.from_user.id) == 'da':
			pass
		else:
			# –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
			db.add_subscriber(message, False)
			await bot.send_message(214196761, '{0} added\n{1} {2}\n{3}'.format(message.from_user.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username))
			



@dp.message_handler(content_types=['document', 'audio', 'sticker', 'photo', 'entities', 'animation', 'video', 'video_note', 'voice', 'contact', 'game', 'poll']) 
async def handle_docs_audio(message: types.Message):
	r = random.randint(0,2)
	if r == 0:
	    await message.answer('–Ø –∂–¥–∞–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –Ω–æ —ç—Ç–æ —Ç–æ–∂–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ')
	elif r == 1:
	    await message.answer('–û–≥–æ, —Ñ–∞–π–ª–∏–∫, –ø—Ä–∏–∫–æ–ª—å–Ω–æ')
	elif r == 2:
	    await message.answer('—è –∫–æ–Ω–µ—á–Ω–æ –ø–æ—Å–º–æ—Ç—Ä—é —ç—Ç–æ –Ω–∞ –¥–æ—Å—É–≥–µ, –Ω–æ —ç—Ç–æ –Ω–µ —Ç–æ —á–µ–º —è –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞—é—Å—å ü§ñ')
	if db.subscriber_exists(message.from_user.id) == 'da':
		pass
	else:
		# –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
		db.add_subscriber(message)
		await bot.send_message(214196761, '{0} added\n{1} {2} \n{3}'.format(message.from_user.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username))
		
 


@dp.message_handler(content_types=['location'])
async def by_location(message: types.Message):
	f = open('location.txt', 'a')
	f.write(str(message.from_user.id) + '  ' + str(message.location.latitude) + '  ' + str(message.location.longitude) + '\n')
	f.close()
	
	await message.answer('–ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–≥–æ–¥–∞ –≤–æ–∑–ª–µ –±–ª–∏–∂–∞–π—à–µ–π –º–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏–∏')
	observation = mgr.weather_at_coords(int(message.location.latitude), int(message.location.longitude))
	w = observation.weather
	l = observation.location
	detailed_status = w.detailed_status
	not_detailed = w.status
	answer = ("–í –≥–æ—Ä–æ–¥–µ "+ l.name + " —Å–µ–π—á–∞—Å –Ø—Å–Ω–æ"+  str(emoji.get_emoji(not_detailed)) +"\n")
	answer += ("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + str(w.temperature('celsius')["temp"]) + "¬∫C \n")
	answer += ("–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: " + str(w.wind()["speed"]) + "–º/—Å\n")
	answer += ("–í–ª–∞–∂–Ω–æ—Å—Ç—å: " + str(w.humidity) + "% \n\n")
	await message.answer(answer)

	if db.subscriber_exists(message.from_user.id) == 'da':
		pass
	else:
		# –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
		db.add_subscriber(message)
		await bot.send_message(214196761, '{0} added\n{1} {2} \n{3}'.format(message.from_user.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username))
		



@dp.message_handler( content_types=['text'])
async def by_massage(message: types.Message):
	if ((message.text[0:4].capitalize() == 'Push') and (message.from_user.id == 214196761)):
		push_text = str(message.text[5:])
		await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞')
		name = 0
		try:
			while name < (db.all_users()[-1][0]-4):
				await bot.send_message(db.all_users()[name][1], push_text)
				name +=1
		except:
			await bot.send_message(214196761, "–æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è " + str(db.all_users()[name][6]))
	else:
		try:
			observation = mgr.weather_at_place(message.text)
			w = observation.weather
			detailed_status = w.detailed_status
			not_detailed = w.status
			answer = ("–í –≥–æ—Ä–æ–¥–µ "+ message.text + " —Å–µ–π—á–∞—Å –Ø—Å–Ω–æ"+  str(emoji.get_emoji(not_detailed)) +"\n")
			answer += ("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + str(w.temperature('celsius')["temp"]) + "¬∫C \n")
			answer += ("–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: " + str(w.wind()["speed"]) + "–º/—Å\n")
			answer += ("–í–ª–∞–∂–Ω–æ—Å—Ç—å: " + str(w.humidity) + "% \n\n")
			await message.answer(answer)
		except:
			await bot.send_message(message.chat.id, '–ø–æ—Ö–æ–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ \n–ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑')
		if db.subscriber_exists(message.from_user.id) == 'da':
			pass
		else:
			# –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
			db.add_subscriber(message)
			await bot.send_message(214196761, '{0} added\n{1} {2} \n{3}'.format(message.from_user.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username))


	


async def time_check():
	while True:
		schedule.run_pending()
		await asyncio.sleep(1)


async def mailing():
	loop  =  asyncio.get_event_loop()
	subscriptions = db.get_subscriptions()
	for s in subscriptions:
		user_time = str(db.get_time(s[1])[0][0])
		city = str(db.subscription_city(s[1])[0])
		city = city[2:-3]
		observation = mgr.weather_at_place(city)
		w = observation.weather
		reference_time_1 = str(w.reference_time('iso')[11:16])[0:-3]
		if user_time == reference_time_1:
			fc1 = mgr.forecast_at_place(city,'3h')
			f = fc1.forecast
			reception_date = str(f)
			reception_date = reception_date[55:65]
			answer = ""
			for w in f:
				time = str(w.reference_time('iso') + 4)
				date = time[:10]
				if date == reception_date:
					time = str(time[11:16])
					temp = str(w.temperature('celsius')["temp"])
					detailed_status = w.detailed_status
					not_detailed = w.status
					answer1 = "{0}:\n{1}{3} {2}¬∫C\n\n".format(time,detailed_status,temp,emoji.get_emoji(not_detailed))
					answer = answer + answer1
			try:
				await bot.send_message(s[1],"‚è∞–í—Ä–µ–º—è –ø–æ–≥–æ–¥—ãüîî:")
				await bot.send_message(s[1],"–ü—Ä–æ–≥–Ω–æ–∑ –≥–æ—Ä–æ–¥–∞ {0}:\n{1}".format(city,answer))
			except:
				pass
		
		

def mailing123():
	asyncio.run_coroutine_threadsafe(mailing(), bot.loop)



schedule.every().day.at("00:00").do(mailing123)
schedule.every().day.at("01:00").do(mailing123)
schedule.every().day.at("02:00").do(mailing123)
schedule.every().day.at("03:00").do(mailing123)
schedule.every().day.at("04:00").do(mailing123)
schedule.every().day.at("05:00").do(mailing123)
schedule.every().day.at("06:00").do(mailing123)
schedule.every().day.at("07:00").do(mailing123)
schedule.every().day.at("08:00").do(mailing123) #–≤—Ä–µ–º—è –ø–æ –≥—Ä–∏–Ω–≤–∏—á—É


if __name__ == '__main__':	
	dp.loop.create_task(time_check())
	executor.start_polling(dp, skip_updates=True)
